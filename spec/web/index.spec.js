!function(){return function e(t,n,r){function a(c,i){if(!n[c]){if(!t[c]){var u="function"==typeof require&&require;if(!i&&u)return u(c,!0);if(o)return o(c,!0);var s=new Error("Cannot find module '"+c+"'");throw s.code="MODULE_NOT_FOUND",s}var f=n[c]={exports:{}};t[c][0].call(f.exports,function(e){return a(t[c][1][e]||e)},f,f.exports,e,t,n,r)}return n[c].exports}for(var o="function"==typeof require&&require,c=0;c<r.length;c++)a(r[c]);return a}}()({1:[function(e,t,n){"use strict";function r(e){return Object.keys(e).reduce(function(t,n){const r=e[n];return t[n]="function"==typeof r?r:Array.isArray(r)?a(r[0],r[1]):a(r),t},{})}function a(e,t=o){return function(...n){const r=t(...n);return{type:e,payload:r}}}function o(e){return e}Object.defineProperty(n,"__esModule",{value:!0}),n.createActionDispatchers=function(e){const t=r(e),n=Object.keys(t);return function(e){return n.reduce(function(n,r){const a=t[r];return n[r]=function(...t){e(a(...t))},n},{})}},n.createActionFactory=a},{}],2:[function(e,t,n){"use strict";const{createActionDispatchers:r}=e(1);describe("createActionDispatchers:",()=>{describe("when called with a spec map:",()=>{let e,t;beforeEach(()=>{e=jasmine.createSpy("factory").and.returnValue("foo"),t=jasmine.createSpy("dispatch");const{onPing:n,onPong:a}=r({onPing:"PING",onPong:["PONG",e]})(t);n("foo","bar"),a("bar","baz")}),it("returns a factory that maps a dispatch function to a map with, for each key in the given spec map, an FSA dispatcher that creates FSA objects as specified by the corresponding spec value, and calls the given dispatch function with that object.",function(){expect(t).toHaveBeenCalledWith({type:"PING",payload:"foo"}),expect(e).toHaveBeenCalledWith("bar","baz"),expect(t).toHaveBeenCalledWith({type:"PONG",payload:"foo"})})})})},{1:1}],3:[function(e,t,n){"use strict";const{createActionFactory:r}=e(1);describe("createActionFactory:",()=>{describe("when called with a string type argument:",()=>{let e;beforeEach(()=>{const t=r("PING");e=t("foo","bar")}),it("returns a factory that maps a payload argument to a corresponding FSA of the given type.",function(){expect(e).toEqual({type:"PING",payload:"foo"})})}),describe("when called with an additional payload factory argument:",()=>{let e,t;beforeEach(()=>{e=jasmine.createSpy("factory").and.returnValue("foo");const n=r("PING",e);t=n("bar","baz")}),it("returns a factory that maps its arguments with the given payload factory to a corresponding FSA of the given type.",function(){expect(e).toHaveBeenCalledWith("bar","baz"),expect(t).toEqual({type:"PING",payload:"foo"})})})})},{1:1}],4:[function(e,t,n){"use strict";e(3),e(2)},{2:2,3:3}]},{},[2,3,4]);